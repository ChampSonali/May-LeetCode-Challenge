/*There may be many approach to do this problem like The first approach i came up was using HAshMAp, The second one by sorinting array element and returning the n/2+2 element but Moore's voting algothim was best suited to do this problem*/ 

class Solution {  					
    public int majorityElement(int[] nums) {
       int candidate=0,count=0;
       // Step 1: To find the candidate element which may satisfy the condition 
        for(int i=0;i<nums.length;i++){
            if(count==0){
                candidate=nums[i];
                count=1;
            }else{
            if(candidate==nums[i])
                count++;
            else 
                count--;
        }}
        // Step 2: To verify that the candidate element found is actually a majority element.
        int ans=0;
        for(int i=0;i<nums.length;i++){
            if(ans>nums.length/2)
                return candidate;
            if(nums[i]==candidate)
                ans++;
        }
        return candidate;
    }
}

Time Complexity: O(n)
Auxillary Space: O(1)

46 / 46 test cases passed.
Status: Accepted
Runtime: 1 ms
Memory Usage: 42.8 MB
