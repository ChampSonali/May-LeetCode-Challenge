class TrieNode{
    private final int N=26;
    private TrieNode links[];
    private boolean isword;
    public TrieNode(){
        links=new TrieNode[N];
    }
    
    public boolean containsKey(char c){
        return links[c-'a']!=null;
    }
    
    public TrieNode get(char c){
        return links[c-'a'];
    }
    
    public void put(char c,TrieNode node){
        links[c-'a']=node;
    }
    
    public void setEnd(){
        isword=true;
    }
    public boolean isEnd(){
        return isword;
    }
}

class Trie {

    /** Initialize your data structure here. */
   private TrieNode root;
    public Trie() {
        root=new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode node=root;
        for(int i=0;i<word.length();i++){
        char curr_char=word.charAt(i);
            if(!node.containsKey(curr_char))
            node.put(curr_char,new TrieNode());
                node=node.get(curr_char);
            
        }
        node.setEnd();
    }
    
    /** Returns if the word is in the trie. */
 
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    
    public TrieNode searchPrefix(String word){
        TrieNode node = root;
        for (int i = 0; i < word.length(); i++) {
           char curLetter = word.charAt(i);
           if (node.containsKey(curLetter)) {
               node = node.get(curLetter);
           } else {
               return null;
           }
        }
        return node;
    }
    
       public boolean search(String word) {
         TrieNode node=searchPrefix(word);
         return node!=null && node.isEnd();
        }
    

    public boolean startsWith(String prefix) {
       TrieNode node = searchPrefix(prefix);
        if (node != null) return true;
        else
            return false;
    }
   
}


/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
 
 
 Time complexity : O(m)
Space complexity : O(1)
